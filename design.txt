--- FEATURES ---

1. REGISTER
// Design สำหรับรองรับการ register จาก client
- Method: POST
- Path: /auth/register
- BODY: firstName, lastName, emailOrMobile (ส่งมาเลย เดี๋ยว server อ่านเองว่ามันเป็น email or mobile), password, confirmPassword
- RESPONSE ที่เป็นไปได้ทั้งหมด:
    201 { accessToken: String , user: {id: Number, firstName: String.........} } eg. { accessToken: "<ค่า accessToken ที่เรา gen>" }
    400 { message: String, emailOrMobileExist: true}
    500 { message: String }
    
2. LOGIN
- Method: POST
- Path: /auth/login 
- BODY: emailOrMobile, password
- RESPONSE:
    200 { accessToken: String, user: {id: Number, firstName: String.........} } 
    400 { message: String }
    500 { message: String }

////////////////////////////

-- Verify Access Token -- 
Get Authenticated User
(front send req ให้ server ตรวจสอบให้ว่า token นี้ใช้ได้ไหม)
- Method: GET //get ข้อมูล user ที่ login อยู่
- Path: /auth/me
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- RESPONSE:
200 { user: {id: Number, firstName: String.........} } // แต่ต้องไม่มี password ติดไปด้วย เพราะมันจะไม่ปลอดภัย ถึงแม้จะอ่านไม่ออก แต่แฮคเกอร์ก็แกะได้
401 { message: String} // ในกรณีที่ verify ไม่ผ่าน เช่น token หมดอายุ
500 { message: String }

////////////////////////////

UPDATE PROFILE/COVER IMAGE
- Method: PATCH (อัพเดทแค่บาง field)
- Path: /user
- HEADER AUTHORIZATION Bearer ACCESS_TOKEN
- BODY profileImage?, coverImage?
- RESPONSE
200 { profileImage?: String, coverImage?: String}
400 { message: String }
401 { message: String }
500 { message: String }

GET USER PROFILE BY id
- GET 
- Path: /user/:userId
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- RESPONSE
200 { user: {id: Number, firstName: String, ...}, status: String, friends: [{id: Number, firstName: String, ...}]} (status: "REQUESTER/RECEIVER/...มีได้ 5 ค่า ต้องเป็น 1 ในห้าค่า)
401 { message: String }
500 { message: String }

////////////////////////////

1. REQUEST FRIEND
- POST
- Path: /friend/:receiverId
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- RESPONSE
200 { message: String }
400 { message: String } = ขอ user ที่ไม่มี
401 { message: String } = unauthenticated
500 { message: String } = server error

---------------------------------------------


2. DELETE FRIEND (UNFRIEND) = ใช้ได้ทั้งกรณีที่เค้า reject การขอเป็นเพื่อน และการ unfriend 

     2.1 REJECT REQUEST
- DELETE
- Path: /friend/:requesterId/reject

     2.2 CANCEL REQUEST
- DELETE
- Path: /friend/:receiverId/cancel

     2.3 UNFRIEND 
- DELETE
- Path: /friend/:friendId/unfriend

        -------------------

- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- RESPONSE
200 { message: String }
400 { message: String } = ขอ user ที่ไม่มี
401 { message: String } = unauthenticated
500 { message: String } = server error

---------------------------------------------

3. ACCEPT FRIEND (status update)
- PATCH
- Path: /friend/:requesterId 
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- RESPONSE
200 { message: String }
400 { message: String } = ขอ user ที่ไม่มี
401 { message: String } = unauthenticated
500 { message: String } = server error


////////////////////////////

CREATE POST
- Method: POST
- Path: /post 
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- BODY message?, image?
- RESPONSE
201 { message: String }
400 { message: String } 
401 { message: String } 
500 { message: String } 

////////////////////////////

GET ALL POST INCLUDE POST friends
- Method: GET
- Path: /post/friend (เอาของเพื่อนด้วย)
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- RESPONSE
200 { posts: [ {id: Number, message: String, image: String, user: {id: Number, firstname: String, .....}}] } //array ของ post obj
400 { message: String } 
401 { message: String } 
500 { message: String } 

////////////////////////////

TOGGLE LIKE
- Method: POST
- Path: /post/:postId/like
- HEADER: AUTHORIZATION Bearer ACCESS_TOKEN
- RESPONSE
201 { message: String }
400 { message: String } 
401 { message: String } 
500 { message: String } 
